name: shrump-compose

services:
  pin-writer-api:
    build:
      context: ./pin-writer
      dockerfile: Dockerfile-dev
    develop:
      watch:
        - action: sync
          path: ./app/api
          target: /app/api
        - action: sync
          path: ./app/dev-tools
          target: /app/dev-tools
    environment:
      - ARMASEC_DOMAIN=keycloak:8080/realms/master
      - ARMASEC_AUDIENCE=https://shrump.dusktreader.dev
      - ARMASEC_DEBUG=false
      - ARMASEC_USE_HTTPS=false
      - LOG_LEVEL=DEBUG
    ports:
      - 8000:80
    healthcheck:
      test: curl --fail http://localhost:80/health || exit 1
      interval: 5s
      retries: 10
      timeout: 5s
    depends_on:
      keycloak:
        condition: service_healthy
      nats1:
        condition: service_healthy
      nats2:
        condition: service_healthy
      nats3:
        condition: service_healthy
    networks:
      - internal-net

  pin-reader-api:
    build:
      context: ./pin-reader
      dockerfile: Dockerfile-dev
    develop:
      watch:
        - action: sync
          path: ./app/api
          target: /app/api
        - action: sync
          path: ./app/dev-tools
          target: /app/dev-tools
    environment:
      - ARMASEC_DOMAIN=keycloak:8080/realms/master
      - ARMASEC_AUDIENCE=https://shrump.dusktreader.dev
      - ARMASEC_DEBUG=true
      - ARMASEC_USE_HTTPS=false
      - DB_URL=mongodb://admin:admin@reader-db
      - DB_NAME=pins
      - LOG_LEVEL=DEBUG
    ports:
      - 8010:80
    healthcheck:
      test: curl --fail http://localhost:80/health || exit 1
      interval: 5s
      retries: 10
      timeout: 5s
    depends_on:
      keycloak:
        condition: service_healthy
      reader-db:
        condition: service_healthy
      nats1:
        condition: service_healthy
      nats2:
        condition: service_healthy
      nats3:
        condition: service_healthy
    networks:
      - internal-net
      - wicket-net

  keycloak:
    image: keycloak/keycloak:26.0
    restart: always
    volumes:
      - kc-realm-files:/opt/keycloak/data/import/
      - ./etc/keycloak-local.json:/opt/keycloak/data/import/keycloak-local.json
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HEALTH_ENABLED=true
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak
      - KC_HOSTNAME=http://raven/shrump/keycloak
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_PROXY_HEADERS=xforwarded
    command:
      - "start-dev"
      - "--import-realm"
      #- "--log-level=DEBUG"
    healthcheck:
      # Since Keycloak removed curl from its image, this command should work. Stolen from: https://gist.github.com/sarath-soman/5d9aec06953bbd0990c648605d4dba07?permalink_comment_id=5225953#gistcomment-5225953
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost:9000\r\nConnection: close\r\n\r\n' >&3;cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1"]
      interval: 5s
      retries: 10
      timeout: 5s
    depends_on:
      keycloak-db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=wicket-net"
      - "traefik.http.middlewares.shrump-keycloak.stripprefix.prefixes=/shrump/keycloak"
      - "traefik.http.routers.shrump-keycloak.middlewares=shrump-keycloak"
      - "traefik.http.routers.shrump-keycloak.rule=Host(`raven`) && PathPrefix(`/shrump/keycloak`)"
      - "traefik.http.routers.shrump-keycloak.entrypoints=web"
      - "traefik.http.services.shrump-keycloak.loadbalancer.server.port=8080"
    networks:
      - wicket-net
      - internal-net

  keycloak-db:
    image: postgres:16.4
    volumes:
      - kc-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_PASSWORD=keycloak
      - POSTGRES_USER=keycloak
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - internal-net

  reader-db:
    image: mongodb/mongodb-community-server:8.0.3-ubi8
    ports:
    - 27017:27017
    volumes:
    - mongodb-data:/data/db
    environment:
    - MONGO_INITDB_ROOT_USERNAME=admin
    - MONGO_INITDB_ROOT_PASSWORD=admin
    - MONGO_INITDB_DATABASE=pins
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      retries: 10
      timeout: 5s
    networks:
      - internal-net

  nats1:
    image: docker.io/nats:2.10-alpine
    ports:
      - "14222:4222"
      - "18222:8222"
    volumes:
      - nats1:/data
    command:
      - "--name=nats1"
      - "--cluster_name=nats-cluster"
      - "--cluster=nats://nats1:6222"
      - "--routes=nats-route://nats1:6222,nats-route://nats2:6222,nats-route://nats3:6222"
      - "--http_port=8222"
      - "--js"
      - "--sd=/data"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8222/healthz?js-enabled=true | grep '\"status\":.*\"ok\"' && exit 0 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - internal-net

  nats2:
    image: docker.io/nats:2.10-alpine
    ports:
      - "24222:4222"
      - "28222:8222"
    volumes:
      - nats2:/data
    command:
      - "--name=nats2"
      - "--cluster_name=nats-cluster"
      - "--cluster=nats://nats2:6222"
      - "--routes=nats-route://nats1:6222,nats-route://nats2:6222,nats-route://nats3:6222"
      - "--http_port=8222"
      - "--js"
      - "--sd=/data"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8222/healthz?js-enabled=true | grep '\"status\":.*\"ok\"' && exit 0 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - internal-net

  nats3:
    image: docker.io/nats:2.10-alpine
    ports:
      - "34222:4222"
      - "38222:8222"
    volumes:
      - nats3:/data
    command:
      - "--name=nats3"
      - "--cluster_name=nats-cluster"
      - "--cluster=nats://nats3:6222"
      - "--routes=nats-route://nats1:6222,nats-route://nats2:6222,nats-route://nats3:6222"
      - "--http_port=8222"
      - "--js"
      - "--sd=/data"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8222/healthz?js-enabled=true | grep '\"status\":.*\"ok\"' && exit 0 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - internal-net

volumes:
  nats1:
  nats2:
  nats3:
  kc-realm-files:
  kc-db-data:
  mongodb-data:

networks:
  wicket-net:
    external: true
  internal-net:
